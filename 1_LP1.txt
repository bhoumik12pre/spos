Q1. Design suitable data structures and implement pass1 of a two pass assembler for pseudo-machine.
START 100
A DS 3
L1 MOVER AREG, B
ADD AREG, C
MOVEM AREG, D
D EQU A+1
L2 PRINT D
ORIGIN L2+1
MOVEM AREG, ='34'
MOVEM AREG, ='14'
LTORG
STOP
MOVEM AREG, ='143'
MOVEM AREG, ='134'
B DC '19
C DC '17
END



Step 1: Open Eclipse and Create a New Project
Open Eclipse IDE.
Go to File > New > Java Project.
Name the project (e.g., TwoPassAssembler), and click Finish.

Step 2: Create a New Package
In the Project Explorer panel, find your project (TwoPassAssembler).
Right-click on the src folder, then select New > Package.
Name the package pass1 (as specified in the code) and click Finish.

Step 3: Create the Assembler1 Class
Right-click on the pass1 package, select New > Class.
Name the class Assembler1 and ensure the package is pass1.
Click Finish.

Step 4: Copy the Code into Assembler1 Class
Copy the Assembler1 class code portion (everything from class Assembler1 { ... }).
In the Assembler1.java file, paste this code inside the class definition.


package pass1;

import java.util.*;

class Assembler1 {
    ArrayList<ArrayList<String>> ic = null;
    ArrayList<ArrayList<String>> sym = null;
    ArrayList<ArrayList<String>> lit = null;
    ArrayList<ArrayList<String>> pol = null;

    public String[][] assignLC(String[][] asm) {
        int start_value = 0;
        for (int i = 0; i < asm.length; i++) {
            for (int j = 0; j < 4; j++) {
                if (asm[i][j].equals("START")) {
                    start_value = Integer.parseInt(asm[i][j + 1]);
                }
            }
            if (i == 0) {
                continue;
            }
            start_value = start_value + 1;
            asm[i][0] = String.valueOf(start_value);
        }
        return asm;
    }

    public void printCode(String[][] asm) {
        for (int i = 0; i < asm.length; i++) {
            for (int j = 0; j < 4; j++) {
                System.out.print(" " + asm[i][j]);
            }
            System.out.println();
        }
    }

    public void generateOutput(String[][] asm, String[][] mot) {
        ArrayList<ArrayList<String>> ic = new ArrayList<>(asm.length);
        ArrayList<ArrayList<String>> sym = new ArrayList<>(asm.length);
        ArrayList<ArrayList<String>> lit = new ArrayList<>(asm.length);
        ArrayList<ArrayList<String>> pol = new ArrayList<>(asm.length);

        for (int i = 0; i < asm.length; i++) {
            ic.add(new ArrayList<>());
            sym.add(new ArrayList<>());
            lit.add(new ArrayList<>());
            pol.add(new ArrayList<>());
        }
        int sym_index = 0;
        int lit_index = 0;
        int pol_index = 0;

        for (int i = 0; i < asm.length; i++) {
            for (int j = 0; j < 4; j++) {
                for (int m = 0; m < mot.length; m++) {
                    if (asm[i][j].equals(mot[m][0])) {
                        String icStr = "(" + mot[m][1] + "," + mot[m][2] + ")";
                        ic.get(i).add(icStr);
                    }
                }
                if (asm[i][j].equals(mot[15][0]) || asm[i][j].equals(mot[12][0])) {
                    String polStr = "(" + pol_index + "," + asm[i][j] + "," + asm[i][0] + ")";
                    pol.get(i).add(polStr);
                }
                if (asm[i][j].matches("[a-zA-Z]")) {
                    String symStr = "(" + sym_index + "," + asm[i][j] + "," + asm[i][0] + ")";
                    sym.get(i).add(symStr);
                    sym_index = sym_index + 1;
                    String icStr = "(S," + asm[i][j] + ")";
                    ic.get(i).add(icStr);
                }
                if (asm[i][j].matches("[0-9]+") && asm[i][j] != asm[i][0]) {
                    String litStr = "(" + lit_index + "," + asm[i][j] + "," + asm[i][0] + ")";
                    lit.get(i).add(litStr);
                    lit_index = lit_index + 1;
                }
            }
        }
        this.ic = ic;
        this.sym = sym;
        this.lit = lit;
        this.pol = pol;
    }
}



Step 5: Create the Pass1 Class (Main Class)
In the pass1 package, right-click and select New > Class.
Name this class Pass1 and ensure itâ€™s in the pass1 package.
Check the box for public static void main(String[] args) to create a main method automatically.
Click Finish.

Step 6: Copy the Main Method Code
Copy the main class code (everything from public class Pass1 { ... }).
In the Pass1.java file, paste this code inside the class definition, replacing the default main method if necessary.

package pass1;

import java.util.ArrayList;

public class Pass1 {
    public static void main(String[] args) {
        String asm_code[][] = {
                {"", "", "START", "100", ""},
                {"A", "", "DS", "3", ""},
                {"L1", "", "MOVER", "AREG", "B"},
                {"", "", "ADD", "AREG", "C"},
                {"", "", "MOVEM", "AREG", "D"},
                {"D", "", "EQU", "A+1", ""},
                {"L2", "", "PRINT", "D", ""},
                {"", "ORIGIN", "L2+1", "", ""},
                {"", "", "MOVEM", "AREG", "='34'", ""},
                {"", "", "MOVEM", "AREG", "='14'", ""},
                {"", "", "LTORG", "", ""},
                {"", "", "STOP", "", ""},
                {"", "", "MOVEM", "AREG", "='143'", ""},
                {"", "", "MOVEM", "AREG", "='134'", ""},
                {"B", "", "DC", "'19'", ""},
                {"C", "", "DC", "'17'", ""},
                {"", "", "END", "", ""}
        };

        String mot[][] = {
                {"STOP", "IS", "00"},
                {"ADD", "IS", "01"},
                {"SUB", "IS", "02"},
                {"MULT", "IS", "03"},
                {"MOVER", "IS", "04"},
                {"MOVEM", "IS", "05"},
                {"COMP", "IS", "06"},
                {"BC", "IS", "07"},
                {"DIV", "IS", "08"},
                {"READ", "IS", "09"},
                {"PRINT", "IS", "10"},
                {"START", "AD", "01"},
                {"END", "AD", "02"},
                {"ORIGIN", "AD", "03"},
                {"EQU", "AD", "04"},
                {"LTORG", "AD", "05"},
                {"DS", "DL", "01"},
                {"DC", "DL", "02"},
                {"AREG", "RG", "01"},
                {"BREG", "RG", "02"},
                {"CREG", "RG", "03"}
        };

        Assembler1 assembler = new Assembler1();
        String[][] asm_with_lc;
        asm_with_lc = assembler.assignLC(asm_code);
        assembler.printCode(asm_with_lc);
        assembler.generateOutput(asm_with_lc, mot);

        System.out.println("Intermediate Code");
        for (ArrayList<String> str : assembler.ic) {
            for (String st : str) {
                System.out.print(st);
            }
            System.out.println();
        }

        System.out.println("SYMBOL TABLE");
        for (ArrayList<String> str : assembler.sym) {
            for (String st : str) {
                System.out.print(st);
            }
            System.out.println();
        }

        System.out.println("LITERAL TABLE");
        for (ArrayList<String> str : assembler.lit) {
            for (String st : str) {
                System.out.print(st);
            }
            System.out.println();
        }

        System.out.println("POOL TABLE");
        for (ArrayList<String> str : assembler.pol) {
            for (String st : str) {
                System.out.print(st);
            }
            System.out.println();
        }
    }
}



Step 7: Run the Program
In the Pass1.java editor window, right-click anywhere inside the code.
Select Run As > Java Application.

Step 8: View Output
The output will appear in the Console panel at the bottom of Eclipse.
You should see the formatted output of the Intermediate Code, Symbol Table, Literal Table, and Pool Table.
Summary of Fil