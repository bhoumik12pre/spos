Q6. Write a program to simulate CPU Scheduling Algorithms: SJF (Preemptive).

2. Create a New Java Project:
Open Eclipse.
Click on File in the top menu.
Select New > Java Project.
Name your project (e.g., SJFProject).
Click Finish.
3. Create a New Java Class:
In the Package Explorer window, right-click on the src folder within your project.
Select New > Class.
Name the class (e.g., SJF).
Make sure to check the public static void main(String[] args) box to create the main method.
Click Finish.
4. Copy the Code into the New Class:
Copy the provided SJF scheduling code.
Paste the code into the newly created SJF.java file inside Eclipse, replacing the template code.
5. Fix the Package Declaration (Optional):
If you are not using a specific package, remove the package SJF; line at the top of the code, or adjust it if you want to organize the class into a package.
Example: If you don't use packages, simply remove the line package SJF;.
6. Run the Program:
Click on the Run button (green triangle) at the top of the Eclipse IDE or right-click the SJF.java file in the Package Explorer and select Run As > Java Application.
The program will compile and run, and you will see the output in the Console window at the bottom of the Eclipse IDE.
7. Input Data:
When the program runs, it will prompt you to enter the number of processes and their burst times.
Input the values as requested in the Console window.
8. View the Output:
After entering the data, the program will display the process table before and after scheduling.
The results will be printed in the Console window.


package SJF;

import java.util.Scanner; 

public class SJF { 
    int Count = 0;
    int[][] processData;
    Scanner scan = new Scanner(System.in);

    public static void main(String a[]) {
        System.out.println("\n\n***********Shortest Job First : (SJF) :***********\n");
        SJF sjf = new SJF();
        sjf.setValue();
        System.out.println("\n\nBefore Scheduling\n");
        sjf.DisplayValue();
        sjf.scheduleSJF();
        System.out.println("\n\nAfter Scheduling\n");
        sjf.DisplayValue();
    }

    public void scheduleSJF() {
        scheduleSorting();
        scheduleCalculation();
    }

    // Sorting the processes based on burst time
    public void scheduleSorting() {
        for (int i = 0; i < Count; i++) {
            for (int j = i + 1; j < Count; j++) {
                if (processData[i][1] > processData[j][1]) {
                    swapProcess(i, j);
                }
            }
        }
    }

    // Swap process data
    public void swapProcess(int p1, int p2) { 
        int[] temp = processData[p1];
        processData[p1] = processData[p2];
        processData[p2] = temp;
    }

    public void scheduleCalculation() {
        processData[0][2] = 0;  // Waiting time for first process is 0
        processData[0][3] = processData[0][1];  // Turnaround time for first process

        for (int i = 1; i < Count; i++) {
            processData[i][2] = processData[i - 1][3];  // Waiting time is previous turnaround time
            processData[i][3] = processData[i][2] + processData[i][1];  // Turnaround time = Waiting time + Burst time
        }
    }

    // Set values for processes
    public void setValue() {
        System.out.print("Enter Number Of processes: ");
        Count = scan.nextInt();
        processData = new int[Count][4];  // [Process ID, Burst Time, Waiting Time, Turnaround Time]

        for (int i = 0; i < Count; i++) {
            System.out.println("Processes[" + i + "]: ");
            processData[i][0] = i;
            System.out.print("\t\tBurst Time[" + i + "]: ");
            processData[i][1] = scan.nextInt();
        }
    }

    // Display process details
    public void DisplayValue() {
        System.out.println("------------------------------------------------------------------------");
        System.out.println("Process Number || Burst Time || Waiting Time || Turn Around Time");
        System.out.println("------------------------------------------------------------------------");
        for (int i = 0; i < Count; i++) {
            System.out.println("Processes[" + processData[i][0] + "]\t||\t" + processData[i][1] + "\t||\t" + processData[i][2] + "\t||\t" + processData[i][3]);
        }
        System.out.println("-------------------------------------------------------------------------");
    }
}




Sample Input:
Let’s assume you have 4 processes with the following burst times:

Process 0: Burst time = 6
Process 1: Burst time = 8
Process 2: Burst time = 7
Process 3: Burst time = 3
When you run the program, you will be prompted for the number of processes and their burst times.

Console Input:
less
Copy code
***********Shortest Job First : (SJF) :***********

Enter Number Of processes: 4
Processes[0]: 
		Burst Time[0]: 6
Processes[1]: 
		Burst Time[1]: 8
Processes[2]: 
		Burst Time[2]: 7
Processes[3]: 
		Burst Time[3]: 3

Before Scheduling
------------------------------------------------------------------------
Process Number || Burst Time || Waiting Time || Turn Around Time
------------------------------------------------------------------------
Processes[0]	||	6	||	0	||	6
Processes[1]	||	8	||	0	||	0
Processes[2]	||	7	||	0	||	0
Processes[3]	||	3	||	0	||	0
-------------------------------------------------------------------------

After Scheduling
------------------------------------------------------------------------
Process Number || Burst Time || Waiting Time || Turn Around Time
------------------------------------------------------------------------
Processes[3]	||	3	||	0	||	3
Processes[0]	||	6	||	3	||	9
Processes[2]	||	7	||	9	||	16
Processes[1]	||	8	||	16	||	24
-------------------------------------------------------------------------
Explanation of the Output:
Before Scheduling: The Waiting Time and Turn Around Time are initially all set to 0 because the scheduling hasn’t been applied yet.

After Scheduling:

Sorted Process Order: The processes are sorted in ascending order of burst times before calculating waiting times and turnaround times. The order becomes:

Process 3: Burst Time = 3
Process 0: Burst Time = 6
Process 2: Burst Time = 7
Process 1: Burst Time = 8
Waiting Time:

The waiting time for a process is the sum of the burst times of all the previous processes.
For example:
Process 3 (first in the sorted order) has a Waiting Time = 0 because it starts immediately.
Process 0 waits for Process 3 to finish, so its waiting time is 3.
Process 2 waits for Processes 3 and 0 to finish, so its waiting time is 9, and so on.
Turnaround Time:

The turnaround time is the sum of the waiting time and burst time.
For example:
Process 3: Turnaround Time = 0 + 3 = 3
Process 0: Turnaround Time = 3 + 6 = 9
Process 2: Turnaround Time = 9 + 7 = 16, etc.
